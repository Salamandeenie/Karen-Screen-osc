{"version":3,"sources":["tools/canvas_tools.js","index.js"],"names":["_initCvs","ctx","width","height","fillStyle","strokeStyle","_primer","fillRect","_drawRawOsc","data","beginPath","i","length","x","y","moveTo","lineTo","stroke","AudioOSC","cvs","source","dest","fft","init","_ct","primer","requestAnimationFrame","draw","clearRect","getByteTimeDomainData","Uint8Array","fill","createAnalyser","fftSize","connect","getContext"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["function _initCvs(ctx, width, height){\n    ctx.fillStyle   = \"#000\";\n    ctx.strokeStyle = \"#0f0\";\n}\nfunction _primer(ctx, width, height){\n    ctx.fillRect(0,0,width,height);\n}\nfunction _drawRawOsc(ctx,data,width,height){\n    ctx.beginPath();\n    for(let i=0; i < data.length; i++){\n        let x = i * (width * 1.0 / data.length); // need to fix x\n        let v = data[i] / 128.0;\n        let y = v * height / 2;\n        if(i === 0) ctx.moveTo(x,y);\n        else ctx.lineTo(x,y);\n    }\n    ctx.stroke();\n}\nexport {\n    _initCvs,\n    _primer,\n    _drawRawOsc\n}","import * as _ct from \"./tools/canvas_tools\";\nexport default class AudioOSC{\n    #actx    = null;\n    #cctx    = null;\n    #anl     = null;\n    #cvs     = null;\n    #paused  = false;\n    #WIDTH   = 300;\n    #HEIGHT  = 150;\n    #FFT     = 2048;\n    #u8ar    = null;\n    #init    = null;\n    #primer  = null;\n    constructor(ctx, cvs, source, dest = null, fft = 2048, init = _ct._initCvs, primer = _ct._primer){\n        this.#actx   = ctx;\n        this.#FFT    = fft;\n        this.#cvs    = cvs;\n        this.#init   = init;\n        this.#primer = primer;\n        this.#anl    = this.#actx.createAnalyser();\n        // Configure Analyzer\n        this.#anl.fftSize = this.#FFT;\n        source.connect(this.#anl);\n        if(dest) this.#anl.connect(dest);\n        // Set up Canvas\n        let {width = 300, height = 150} = this.#cvs;\n        this.#WIDTH  = width;\n        this.#HEIGHT = height;\n        this.#u8ar = new Uint8Array(this.#FFT);\n        this.#cctx = this.#cvs.getContext(\"2d\");\n        this.#init(this.#cctx,this.#WIDTH,this.#HEIGHT);\n    }\n    draw = () =>{\n        if(!this.#paused) requestAnimationFrame(this.draw);\n        this.#cctx.clearRect(0 , 0, this.#WIDTH, this.#HEIGHT);\n        this.#primer(this.#cctx, this.#WIDTH, this.#HEIGHT);\n        this.#anl.getByteTimeDomainData(this.#u8ar);\n        _ct._drawRawOsc(this.#cctx, this.#u8ar, this.#WIDTH, this.#HEIGHT);\n    }\n    start = () => {\n        this.#paused = false;\n        this.draw();\n    }\n    pause = () =>{\n        this.#paused = true;\n    }\n    reset = () =>{\n        this.#u8ar = new Uint8Array().fill(0);\n        this.#cctx.clearRect(0 , 0, this.#WIDTH, this.#HEIGHT);\n        this.#primer(this.#cctx, this.#WIDTH, this.#HEIGHT);\n        _ct._drawRawOsc(this.#cctx, this.#u8ar, this.#WIDTH, this.#HEIGHT);\n    }\n}"]}